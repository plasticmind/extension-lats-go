// Helper function to create and insert the UI elements
function createUIElements() {
  console.log('createUIElements called');
  const isTimesheetPage = window.location.pathname.includes('/Time') || 
                         window.location.href.includes('lats.ny.gov/Time');
  
  console.log('isTimesheetPage:', isTimesheetPage);
  console.log('Current URL:', window.location.href);
  console.log('Current pathname:', window.location.pathname);
                         
  if (isTimesheetPage) {
    console.log('Inside timesheet page condition');
    
    const insertControls = () => {
      console.log('insertControls function started');
      
      try {
        const saveButton = document.getElementById('btnSaveTimesheet_0');
        console.log('Save button found:', saveButton);
        
        const saveButtonContainer = saveButton?.closest('.col-xs-3');
        console.log('Save button container:', saveButtonContainer);
                        
        if (!saveButtonContainer) {
          console.log('Save button container not found, will retry');
          setTimeout(insertControls, 500);
          return;
        }

        console.log('Checking for existing controls');
        if (!document.querySelector('.lats-enhancer-controls')) {
          console.log('Creating control panel');
          const controlPanel = document.createElement('div');
          console.log('Control panel created');
          
          try {
            controlPanel.className = 'lats-enhancer-controls';
            console.log('Class name set');
            
            controlPanel.style.display = 'inline-block';
            console.log('Display style set');
            
            controlPanel.style.float = 'right';
            console.log('Float style set');
            
            console.log('Creating fill button');
            const fillButton = document.createElement('button');
            fillButton.id = 'fillTimecard';
            fillButton.className = 'k-button k-button-lg k-rounded-lg k-button-solid k-button-solid-base lats-enhancer-button';
            fillButton.type = 'button';
            console.log('Fill button created and configured');
            
            const buttonText = document.createElement('span');
            buttonText.className = 'k-button-text';
            buttonText.textContent = 'Fill Timecard';
            console.log('Button text created');
            
            fillButton.appendChild(buttonText);
            controlPanel.appendChild(fillButton);
            console.log('Button assembled');
            
            console.log('Attempting to insert control panel');
            saveButtonContainer.insertBefore(controlPanel, saveButton);
            console.log('Control panel inserted successfully');

            // Create the modal for day selection if it doesn't exist
            if (!document.querySelector('.lats-modal')) {
              const modal = document.createElement('div');
              modal.className = 'lats-modal';
              modal.style.display = 'none';
              
              const modalContent = document.createElement('div');
              modalContent.className = 'lats-modal-content';
              
              const header = document.createElement('h2');
              header.textContent = 'Select Days to Fill';
              modalContent.appendChild(header);

              // Add settings info
              const settingsInfo = document.createElement('div');
              settingsInfo.className = 'settings-info';
              settingsInfo.style.cssText = 'margin: 10px 0; font-size: 14px; display: flex; justify-content: space-between; align-items: center;';
              
              const scheduleText = document.createElement('div');
              scheduleText.style.cssText = 'color: #666;';
              scheduleText.textContent = 'Using default schedule (8:30 AM - 4:30 PM)';
              
              const settingsLink = document.createElement('a');
              settingsLink.href = '#';
              settingsLink.textContent = 'Edit Schedule Settings';
              settingsLink.style.cssText = 'color: #1a73e8; text-decoration: none;';
              settingsLink.addEventListener('click', (e) => {
                e.preventDefault();
                chrome.runtime.sendMessage({ action: 'openOptions' });
              });

              settingsInfo.appendChild(scheduleText);
              settingsInfo.appendChild(settingsLink);
              modalContent.appendChild(settingsInfo);

              // Check if settings exist and update schedule text
              chrome.storage.sync.get(['week1', 'week2', 'alternateSchedule'], (settings) => {
                if (settings.week1) {
                  const schedule = settings.alternateSchedule ? 'Custom schedule (varies by week)' : `Custom schedule (${settings.week1.timeIn} - ${settings.week1.timeOut})`;
                  scheduleText.textContent = schedule;
                }
              });

              const daysContainer = document.createElement('div');
              daysContainer.className = 'days-container';
              daysContainer.style.cssText = 'display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px; margin: 15px 0;';
              modalContent.appendChild(daysContainer);

              // Get the dates from the timesheet table
              const dates = [];
              const headerRow = document.querySelector('#timesheetTable tr:first-child');
              if (headerRow) {
                const dateCells = headerRow.querySelectorAll('th.timesheetGridHeader');
                dateCells.forEach(cell => {
                  const dateText = cell.textContent.trim().split('\n')[0].trim();
                  if (dateText) {
                    const date = parseDate(dateText);
                    if (date) {
                      dates.push(date);
                    }
                  }
                });
              }

              // Create day selection cards
              dates.forEach(date => {
                const dayCard = document.createElement('div');
                dayCard.className = 'day-card';
                dayCard.style.cssText = 'border: 1px solid #ddd; padding: 10px; border-radius: 4px;';

                const dateLabel = document.createElement('div');
                dateLabel.textContent = date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });
                dateLabel.style.marginBottom = '8px';

                const dayTypeSelect = document.createElement('select');
                dayTypeSelect.className = 'day-type-select';
                dayTypeSelect.style.cssText = 'width: 100%; padding: 5px; margin-top: 5px;';
                dayTypeSelect.dataset.date = date.toISOString();

                [
                  { value: 'regular', text: 'Regular Day' },
                  { value: 'vacation', text: 'Vacation' },
                  { value: 'sick', text: 'Sick' },
                  { value: 'sick family', text: 'Sick Family' },
                  { value: 'personal', text: 'Personal Day' },
                  { value: 'holiday', text: 'Holiday' },
                  { value: 'floater', text: 'Floater' }
                ].forEach(opt => {
                  const option = document.createElement('option');
                  option.value = opt.value;
                  option.textContent = opt.text;
                  dayTypeSelect.appendChild(option);
                });

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'day-checkbox';
                checkbox.checked = true;
                checkbox.dataset.date = date.toISOString();
                checkbox.style.marginRight = '5px';

                const checkboxLabel = document.createElement('label');
                checkboxLabel.style.display = 'flex';
                checkboxLabel.style.alignItems = 'center';
                checkboxLabel.appendChild(checkbox);
                checkboxLabel.appendChild(document.createTextNode('Include'));

                dayCard.appendChild(dateLabel);
                dayCard.appendChild(dayTypeSelect);
                dayCard.appendChild(checkboxLabel);
                daysContainer.appendChild(dayCard);
              });

              const buttonContainer = document.createElement('div');
              buttonContainer.className = 'modal-buttons';
              buttonContainer.style.cssText = 'display: flex; gap: 10px; justify-content: flex-end;';
              
              const cancelButton = document.createElement('button');
              cancelButton.id = 'cancelTimecard';
              cancelButton.className = 'k-button k-button-lg k-rounded-lg k-button-solid k-button-solid-base';
              cancelButton.style.cssText = 'background-color: white; border: 1px solid #ccc; color: #333;';
              const cancelText = document.createElement('span');
              cancelText.className = 'k-button-text';
              cancelText.textContent = 'Cancel';
              cancelButton.appendChild(cancelText);
              
              const applyButton = document.createElement('button');
              applyButton.id = 'applyTimecard';
              applyButton.className = 'k-button k-button-lg k-rounded-lg k-button-solid k-button-solid-base';
              const applyText = document.createElement('span');
              applyText.className = 'k-button-text';
              applyText.textContent = 'Apply';
              applyButton.appendChild(applyText);
              
              // Add Cancel button first, then Apply button
              buttonContainer.appendChild(cancelButton);
              buttonContainer.appendChild(applyButton);
              modalContent.appendChild(buttonContainer);
              
              modal.appendChild(modalContent);
              document.body.appendChild(modal);

              // Initialize event listeners
              initializeEventListeners();
            }
          } catch (error) {
            console.error('Error in control panel creation:', error);
            console.error('Error stack:', error.stack);
          }
        } else {
          console.log('Controls already exist');
        }
      } catch (error) {
        console.error('Error in insertControls:', error);
        console.error('Error stack:', error.stack);
      }
    };

    console.log('About to start insertion attempt');
    insertControls();
    console.log('Insertion attempt started');
  }
}

// Helper function to fill in time values
function fillTimeValues(date, times) {
  console.log('[DEBUG] fillTimeValues called with:', { 
    date: date.toLocaleDateString(),
    times 
  });
  
  const table = document.querySelector('#timesheetTable');
  if (!table) {
    console.error('[DEBUG] Table not found');
    return;
  }

  // Get the day of the week for the target date
  const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });
  // Format the target date as MM/DD to match LATS format
  const targetDateStr = `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}`;
  console.log('[DEBUG] Target day/date:', { dayOfWeek, targetDateStr });

  // Get all rows in the table
  const rows = table.getElementsByTagName('tr');
  console.log('[DEBUG] Found rows:', rows.length);

  // Time row types we need to fill
  const timeRows = {
    'Day In': times.timeIn,
    'Lunch Out': times.lunchOut,
    'Lunch In': times.lunchIn,
    'Day Out': times.timeOut
  };

  // First find the column index for our target date
  const headerRow = Array.from(rows).find(row => 
    row.querySelector('.k-header.timesheetGridHeader')
  );
  
  if (!headerRow) {
    console.error('[DEBUG] Header row not found');
    return;
  }

  const headerCells = headerRow.getElementsByTagName('th');
  let targetColumnIndex = -1;

  for (let i = 0; i < headerCells.length; i++) {
    const cell = headerCells[i];
    if (cell.textContent.trim().includes(targetDateStr)) {
      targetColumnIndex = i;
      break;
    }
  }

  console.log('[DEBUG] Target column index:', targetColumnIndex);

  if (targetColumnIndex === -1) {
    console.error('[DEBUG] Date column not found');
    return;
  }

  // Process each row
  for (const row of rows) {
    // Check if this row has a header cell with one of our target types
    const firstCell = row.querySelector('td');
    if (!firstCell) continue;

    const rowType = firstCell.textContent.trim();
    if (!Object.keys(timeRows).includes(rowType)) continue;

    console.log(`[DEBUG] Processing row for ${rowType}`);

    // Get all input fields in this row
    const inputs = row.getElementsByTagName('input');
    console.log(`[DEBUG] Found ${inputs.length} inputs in row`);

    // Get the input at our target column index
    const targetInput = inputs[targetColumnIndex];
    if (targetInput && targetInput.type === 'text') {
      console.log(`[DEBUG] Found input for ${rowType} at column ${targetColumnIndex}`);
      const timeValue = timeRows[rowType];
      console.log(`[DEBUG] Setting value to ${timeValue}`);
      
      targetInput.value = timeValue;
      
      // Trigger change event
      const event = new Event('change', { bubbles: true });
      targetInput.dispatchEvent(event);
    } else {
      console.error(`[DEBUG] No input found for ${rowType} at column ${targetColumnIndex}`);
    }
  }
}

// Helper function to fill special day type
function fillSpecialDay(date, type) {
  console.log('[DEBUG] Filling special day:', date, type);
  
  // Get the day of the week for the target date
  const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });
  console.log('[DEBUG] Target day:', dayOfWeek);

  // Map UI types to LATS input title types
  const typeMap = {
    'vacation': 'Vacation',
    'sick': 'Sick',
    'sick family': 'Sick Family',
    'personal': 'Personal',
    'holiday': 'Holiday',
    'floater': 'Floater',
    'vrws charge': 'VRWS'
  };

  // Get the correct type for the input title
  const searchType = typeMap[type.toLowerCase()];
  if (!searchType) {
    console.error(`[DEBUG] Unknown special day type: ${type}`);
    return;
  }
  console.log('[DEBUG] Looking for type:', searchType);

  // Find all inputs for this special type
  const inputs = document.querySelectorAll('input[type="text"][class*="timesheetCell"]');
  console.log(`[DEBUG] Found ${inputs.length} timesheet inputs`);

  // Find the input for our target day
  for (const input of inputs) {
    console.log('[DEBUG] Checking input:', input.title, input.id);
    // Check both the title and the hidden type input
    if (input.title.includes(searchType) || 
        (input.id.includes('Charges') && input.parentElement.querySelector(`input[type="hidden"][value="${searchType}"]`))) {
      
      if (input.title.includes(dayOfWeek) || input.title.includes(`Day ${getDayNumber(date)}`)) {
        console.log(`[DEBUG] Found matching input for ${searchType} on ${dayOfWeek}`);
        input.value = '7.5';
        
        // Trigger the change event to ensure LATS validates the entry
        const event = new Event('change', { bubbles: true });
        input.dispatchEvent(event);
        return;
      }
    }
  }
  
  console.error(`[DEBUG] No matching input found for ${type} on ${dayOfWeek}`);
}

// Helper function to get the day number (1-14) from a date
function getDayNumber(date) {
  // Get the first day of the timesheet
  const firstDateCell = document.querySelector('#timesheetTable tr:first-child th.timesheetGridHeader');
  if (!firstDateCell) return null;
  
  const firstDateText = firstDateCell.textContent.trim().split('\n')[0].trim();
  const firstDate = parseDate(firstDateText);
  
  // Calculate days between
  const diffTime = Math.abs(date - firstDate);
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays + 1;
}

// Helper function to clear all timecard values
function clearTimecard() {
  console.log('[DEBUG] Clearing timecard values');
  
  const table = document.querySelector('#timesheetTable');
  if (!table) {
    console.error('[DEBUG] Table not found');
    return;
  }

  // Get all rows in the table
  const rows = table.getElementsByTagName('tr');
  
  // Process each row
  for (const row of rows) {
    const firstCell = row.querySelector('td');
    if (!firstCell) continue;

    const rowType = firstCell.textContent.trim();
    // Clear both regular time entry rows and special day rows
    if (['Day In', 'Lunch Out', 'Lunch In', 'Day Out'].includes(rowType)) {
      // Clear regular time entry fields
      const inputs = row.querySelectorAll('input[type="text"]');
      inputs.forEach(input => {
        input.value = '';
        const event = new Event('change', { bubbles: true });
        input.dispatchEvent(event);
      });
    }
  }

  // Clear all special day fields (Vacation, Sick, Personal, etc.)
  const specialDayInputs = table.querySelectorAll('input[type="text"][title*=" Day "][class*="timesheetCell"]');
  specialDayInputs.forEach(input => {
    if (input.title.match(/^(Vacation|Sick|Personal|Sick Family) Day/)) {
      input.value = '0';
      const event = new Event('change', { bubbles: true });
      input.dispatchEvent(event);
    }
  });

  console.log('[DEBUG] Finished clearing timecard');
}

// Helper function to parse date from LATS format
function parseDate(dateText) {
  console.log('Parsing date:', dateText);
  const [month, day] = dateText.split('/');
  const year = new Date().getFullYear();
  return new Date(year, parseInt(month) - 1, parseInt(day));
}

// Helper function to determine if a date is in the second week
function isSecondWeek(date) {
  // Get the first day of the timesheet
  const firstDateCell = document.querySelector('#timesheetTable tr:first-child th.timesheetGridHeader');
  if (!firstDateCell) return false;
  
  const firstDateText = firstDateCell.textContent.trim().split('\n')[0].trim();
  const firstDate = parseDate(firstDateText);
  
  // If the date is more than 7 days after the first date, it's in the second week
  return date.getTime() - firstDate.getTime() > 7 * 24 * 60 * 60 * 1000;
}

// Initialize event listeners
function initializeEventListeners() {
  console.log('Initializing event listeners');
  
  const fillTimecardBtn = document.getElementById('fillTimecard');
  const modal = document.querySelector('.lats-modal');
  
  if (fillTimecardBtn) {
    fillTimecardBtn.addEventListener('click', () => {
      console.log('[DEBUG] Fill button clicked');
      if (modal) {
        modal.style.display = 'block';
      }
    });
  }

  const applyButton = document.getElementById('applyTimecard');
  if (applyButton) {
    applyButton.addEventListener('click', () => {
      console.log('[DEBUG] Apply button clicked');
      
      // Clear all existing values first
      clearTimecard();
      
      chrome.storage.sync.get({
        alternateSchedule: false,
        week1: {
          timeIn: '8:30 AM',
          lunchOut: '12:00 PM',
          lunchIn: '12:30 PM',
          timeOut: '4:30 PM'
        },
        week2: {
          timeIn: '8:30 AM',
          lunchOut: '12:00 PM',
          lunchIn: '12:30 PM',
          timeOut: '4:30 PM'
        }
      }, (settings) => {
        console.log('[DEBUG] Settings loaded:', settings);
        
        const dayControls = document.querySelectorAll('.day-card');
        console.log('[DEBUG] Found day cards:', dayControls.length);
        
        dayControls.forEach((card) => {
          const checkbox = card.querySelector('.day-checkbox');
          if (!checkbox?.checked) {
            console.log('[DEBUG] Skipping unchecked day');
            return;
          }

          const dateText = checkbox.dataset.date;
          console.log('[DEBUG] Processing date:', dateText);
          
          const date = new Date(dateText);
          console.log('[DEBUG] Parsed date:', date);
          
          const dayTypeSelect = card.querySelector('.day-type-select');
          const dayType = dayTypeSelect?.value;
          console.log('[DEBUG] Day type:', dayType);
          
          if (dayType === 'regular') {
            console.log('[DEBUG] Processing regular day');
            const times = settings.alternateSchedule && isSecondWeek(date) ? 
              settings.week2 : settings.week1;
            console.log('[DEBUG] Using times:', times);
            
            fillTimeValues(date, times);
          } else if (dayType) {
            console.log('[DEBUG] Processing special day:', dayType);
            fillSpecialDay(date, dayType);
          }
        });
        
        modal.style.display = 'none';
      });
    });
  }

  const cancelButton = document.getElementById('cancelTimecard');
  if (cancelButton) {
    cancelButton.addEventListener('click', () => {
      if (modal) {
        modal.style.display = 'none';
      }
    });
  }
}

// Initialize when the DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    createUIElements();
});

// Also handle error pages
if (window.location.pathname.includes('error.aspx')) {
    handleErrorPage();
}

// Handle error page
function handleErrorPage() {
  if (document.body.textContent.includes('error')) {
    const fixButton = document.createElement('button');
    fixButton.textContent = 'Fix LATS Session';
    fixButton.className = 'lats-enhancer-button';
    fixButton.addEventListener('click', () => {
      // Clear cookies for the LATS domain
      chrome.runtime.sendMessage({ action: 'clearCookies' }, () => {
        window.location.reload();
      });
    });
    document.body.insertBefore(fixButton, document.body.firstChild);
  }
} 